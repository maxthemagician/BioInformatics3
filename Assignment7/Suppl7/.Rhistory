plot(samfit)
samfit = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000)
plot(samfit)
#down and up regulated genes
samfit$samr.obj$siggenes.table
#down and up regulated genes
samfit$siggenes.table
dat[,1:9] = mat
warnings()
View(dat)
# SAM
y<-c(rep(1,3),rep(2,6))   #define classes
samfit = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000)
samfit = SAM(dat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000)
samfit = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000, genenames = dat$Gene.names)
plot(samfit)
#down and up regulated genes
samfit$siggenes.table
#down and up regulated genes
samfit$siggenes.table
#down and up regulated genes
samfit$siggenes.table$genes.up[1:10,]
samfit$siggenes.table$genes.lo[1:10]
samfit$siggenes.table$genes.lo[1:10,]
samfit = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
#down and up regulated genes
samfit$siggenes.table$genes.up[1:10,]
samfit$siggenes.table$genes.lo[1:10,]
samfit = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000, genenames = dat$Gene.names)
#down and up regulated genes
samfit$siggenes.table$genes.up[1:10,]
samfit$siggenes.table$genes.lo[1:10,]
# nperms 1000
samfit1000 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
plot(samfit1000)
#down and up regulated genes
samfit1000$siggenes.table$genes.up[1:10,]
samfit1000$siggenes.table$genes.lo[1:10,]
# nperms 100
samfit100 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 100, genenames = dat$Gene.names)
plot(samfit100)
#down and up regulated genes
samfit100$siggenes.table$genes.up[1:10,]
samfit100$siggenes.table$genes.lo[1:10,]
samfit1000$siggenes.table$genes.lo[1:10,]
samfit100$siggenes.table$genes.up[1:10,]
samfit1000$siggenes.table$genes.up[1:10,]
plot(samfit1000)
plot(samfit100)
samfit5 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000, genenames = dat$Gene.names)
plot(samfit5)
#down and up regulated genes
samfit5$siggenes.table$genes.up[1:10,]
samfit5$siggenes.table$genes.lo[1:10,]
# frd 20%
samfit20 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
plot(samfit20)
#down and up regulated genes
samfit20$siggenes.table$genes.up[1:10,]
samfit20$siggenes.table$genes.lo[1:10,]
samfit5
samfit5$samr.obj
samfit5$
# -> fdr does not change anything in top 10 up and down
#### nperms ####
# nperms 1000
samfit1000 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
samfit5
samfit5$samfit1000
samfit20$siggenes.table$ngenes.up
samfit20$siggenes.table$ngenes.lo
samfit20$siggenes.table$ngenes.up
samfit5$siggenes.table$ngenes.up
samfit20$siggenes.table$ngenes.lo
samfit5$siggenes.table$ngenes.lo
samfit20$siggenes.table$ngenes.up
samfit5$siggenes.table$ngenes.up
samfit20$siggenes.table$ngenes.lo
samfit5$siggenes.table$ngenes.lo
# quantile normalization
mat = normalize.quantiles(as.matrix(dat[,1:9]))
dat = fread("ms_data.txt")
#### log2-transfrom ####
dat[,1:9] = log2(dat[,1:9])
#### quantile normalization ####
# chose the first RNA sample
mat = normalize.quantiles(as.matrix(dat[,1:6]))
#### SAM ####
y<-c(rep(1,3),rep(2,3))   #define classes, 3 controles, 3 rnas
####  FDR ####
# frd 5%
samfit5 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000, genenames = dat$Gene.names)
plot(samfit5)
#down and up regulated genes
samfit5$siggenes.table$genes.up[1:10,]
samfit5$siggenes.table$genes.lo[1:10,]
# frd 20%
samfit20 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
plot(samfit20)
#down and up regulated genes
samfit20$siggenes.table$genes.up[1:10,]
samfit20$siggenes.table$genes.lo[1:10,]
samfit20$siggenes.table$ngenes.up
samfit5$siggenes.table$ngenes.up
samfit20$siggenes.table$ngenes.lo
samfit5$siggenes.table$ngenes.lo
# -> fdr does not change anything in top 10 up and down
#    changes the number of dregulated genes drastically
#### nperms ####
# nperms 1000
samfit1000 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
plot(samfit1000)
#down and up regulated genes
samfit1000$siggenes.table$genes.up[1:10,]
samfit1000$siggenes.table$genes.lo[1:10,]
# nperms 100
samfit100 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 100, genenames = dat$Gene.names)
plot(samfit100)
#down and up regulated genes
samfit100$siggenes.table$genes.up[1:10,]
samfit100$siggenes.table$genes.lo[1:10,]
# -> nperms does not influence the top 10 up and down,
#    but the overall distribution of the extreme values -> plots
dat[,1:9] = log2(dat[,1:9])
#### quantile normalization ####
# chose the first RNA sample
mat = normalize.quantiles(as.matrix(dat[,1:6]))
#### SAM ####
y<-c(rep(1,3),rep(2,3))   #define classes, 3 controles, 3 rnas
####  FDR ####
# frd 5%
samfit5 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000, genenames = dat$Gene.names)
plot(samfit5)
#down and up regulated genes
samfit5$siggenes.table$genes.up[1:10,]
samfit5$siggenes.table$genes.lo[1:10,]
# frd 20%
samfit20 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
plot(samfit20)
#down and up regulated genes
samfit20$siggenes.table$genes.up[1:10,]
samfit20$siggenes.table$genes.lo[1:10,]
samfit20$siggenes.table$ngenes.up
samfit5$siggenes.table$ngenes.up
samfit20$siggenes.table$ngenes.lo
samfit5$siggenes.table$ngenes.lo
# -> fdr does not change anything in top 10 up and down
#    changes the number of dregulated genes drastically
#### nperms ####
# nperms 1000
samfit1000 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 1000, genenames = dat$Gene.names)
plot(samfit1000)
#down and up regulated genes
samfit1000$siggenes.table$genes.up[1:10,]
samfit1000$siggenes.table$genes.lo[1:10,]
# nperms 100
samfit100 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.20, nperms = 100, genenames = dat$Gene.names)
plot(samfit100)
#down and up regulated genes
samfit100$siggenes.table$genes.up[1:10,]
samfit100$siggenes.table$genes.lo[1:10,]
# -> nperms does not influence the top 10 up and down,
#    but the overall distribution of the extreme values -> plots
y<-c(rep(1,3),rep(2,3))   #define classes, 3 controles, 3 rnas
#### quantile normalization ####
# chose the first RNA sample
mat = normalize.quantiles(as.matrix(dat[,1:6]))
####  FDR ####
# frd 5%
samfit5 = SAM(mat,y,resp.type ="Two class unpaired", fdr.output = 0.05, nperms = 1000, genenames = dat$Gene.names)
getwd()
setwd("/Users/maxjakob/Desktop/Uni/Master/BI3/BioInformatics3/Assignment7/Suppl7/")
dat = fread("ms_toy.txt")
if(!require(data.table)){
install.packages("data.table")
}
dat = fread("ms_toy.txt")
View(dat)
hist(dat[,1])
hist(x,)
dat[,1]
hist(as.numeric(dat[,1]),)
as.numeric(dat[,1])
hist(as.numeric(dat[,1]))
as.numeric(dat[,1])
dat = as.matrix(dat)
hist(as.numeric(dat[,1]))
hist(as.numeric(dat[,1]), col = "red")
hist(as.numeric(dat[,1]), col = "Blue")
h = hist(as.numeric(dat[,1]), col = "Blue", xlab = "Expression Value")
h = hist(dat[,1], col = "Blue", xlab = "Expression Value")  #plot of inital dist of col 1
m = mean(dat[,1])
m = mean(dat[,1], na.rm = T)
s = sd(dat[,1], na.rm = T)
quantile(m)
quantile(dat[,1])
quantile(dat[,1], na.rm = T)
q = quantile(dat[,1], na.rm = T)
nm = q[2]
quantile(dat[,1], na.rm = T)
nm = q[2]
nm
nm = as.numeric(q[2])
rnorm(10, nm, s)
hist(rnorm(100, nm, s))
if(!require(ggplot2)){
install.packages("ggplot2")
}
if(!require(ggplot2)){
install.packages("ggplot2")
}
filles = list()
for(i in 1:length(dat[,1])){
if(is.na(dat[i,1])){
append(filled,rnorm(1, nm, s))
}
}
for(i in 1:length(dat[,1])){
if(is.na(dat[i,1])){
append(filles,rnorm(1, nm, s))
}
}
is.na(dat[i,1])
is.na(dat[,1])
sum(is.na(dat[,1]))
table(is.na(dat[,1]))
is.na(dat[4,1])
is.na(dat[3,1])
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
s = 1/4 *s                    # take fraction
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
rnorm(1, nm, s)
hist(rnorm(100, nm, s))
filles = list()
for(i in 1:length(dat[,1])){
if(is.na(dat[i,1])){
append(filles,rnorm(1, nm, s))
}
}
filles = list()
for(i in 1:length(dat[,1])){
if(is.na(dat[i,1])){
filles[length(filles)+1]= rnorm(1, nm, s)
}
}
filles$name = 'imputed data'
dat$name = 'original data'
org_dat = dat[,1]
dat[,1]
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
h = hist(org_dat, col = "Blue", xlab = "Expression Value")  #plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/4 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat)){
filles[length(filles)+1]= rnorm(1, nm, s)
}
}
warnings
warnings()
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
filles[length(filles)+1]= rnorm(1, nm, s)
}
}
filles$name = 'imputed data'
org_dat$name = 'original data'
View(org_dat)
toplot = rbind(filles, org_dat)
View(toplot)
ggplot(toplot, aes(length, fill = name)) + geom_density(alpha = 0.2)
org_dat = as.data.frame(org_dat)
filles$name = 'imputed data'
org_dat$name = 'original data'
toplot = rbind(filles, org_dat)
ggplot(toplot, aes(length, fill = name)) + geom_density(alpha = 0.2)
toplot = melt(filles, org_dat)
ggplot(toplot, aes(length, fill = name)) + geom_density(alpha = 0.2)
ggplot(toplot, aes(length)) + geom_density(alpha = 0.2)
View(toplot)
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
h = hist(org_dat, col = "Blue", xlab = "Expression Value")  #plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/4 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
filles[length(filles)+1]= rnorm(1, nm, s)
}
}
org_dat = as.data.frame(org_dat)
org_dat = as.data.frame(org_dat)
toplot = melt(filles, org_dat)
ggplot(toplot, aes(length)) + geom_density(alpha = 0.2)
ggplot(toplot) + geom_density(alpha = 0.2)
plot(toplot)
hist(toplot)
View(toplot)
toplot = rbind(filles, org_dat)
hist(toplot)
View(toplot)
rbind(filles, org_dat)
ppp
ppp(i)
org_dat[is.na(org_dat[i])] = rnorm(1, mean = nm, sd = s)
org_dat[is.na(org_dat[i])]
org_dat[is.na(org_dat)] = rnorm(1, mean = nm, sd = s)
View(org_dat)
ppp <- function(i){
p1 = hist(rnorm(org_dat, mean =m, sd = s),freq = TRUE)
p2 = hist(as.numeric(org_dat), freq = TRUE, breaks= 100)
plot(p2, col=rgb(0,0,1,1/4))
plot(p1,col=rgb(1,0,0,1/4),add=T)
}
ppp(1)
ppp <- function(i){
p1 = hist(rnorm(org_dat, mean =nm, sd = s),freq = TRUE)
p2 = hist(as.numeric(org_dat), freq = TRUE, breaks= 100)
plot(p2, col=rgb(0,0,1,1/4))
plot(p1,col=rgb(1,0,0,1/4),add=T)
}
ppp(1)
clear
clear()
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
hist(org_dat, col = "Blue", xlab = "Expression Value")  #plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/4 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
filles[length(filles)+1]= rnorm(1, nm, s)
}
}
hist(filles, col = "Red", add=T)
hist(as.numeric(filles), col = "Red", add=T)
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
hist(org_dat, col = "Blue", xlab = "Expression Value")  #plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/2 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
filles[length(filles)+1]= rnorm(1, nm, s)
}
}
hist(as.numeric(filles), col = "Red", add=T)
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
hist(org_dat, col = "Blue", xlab = "Expression Value")  #plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/2 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
org_dat[i] = rnorm(1, nm, s)
filles[length(filles)+1]= org_dat[i]
}
}
hist(as.numeric(filles), col = "Red", add=T)
hist(org_dat, col = "Green", add=T)
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
c1 = org_dat
#plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/2 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
org_dat[i] = rnorm(1, nm, s)
filles[length(filles)+1]= org_dat[i]
}
}
hist(c1, col = "Green", xlab = "Expression Value")
hist(as.numeric(filles), col = "Red", add=T)
hist(org_dat, col = "Blue", add = T)
hist(org_dat, col = "Green", xlab = "Expression Value")
hist(as.numeric(filles), col = "Red", add=T)
hist(c1, col = "Blue", add = T)
hist(org_dat, col = "Green", xlab = "Expression Value")
hist(c1, col = "Blue", add = T)
hist(as.numeric(filles), col = "Red", add=T)
dat = fread("ms_toy.txt") #read data
dat = as.matrix(dat)      #transform fo better plotting
org_dat = dat[,1]
c1 = org_dat
#plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/2 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[1])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
org_dat[i] = rnorm(1, nm, s)
filles[length(filles)+1]= org_dat[i]
}
}
hist(org_dat, col = "Green", xlab = "Expression Value")
hist(c1, col = "Blue", add = T)
hist(as.numeric(filles), col = "Red", add=T)
c1 = org_dat
#plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/2 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
org_dat[i] = rnorm(1, nm, s)
filles[length(filles)+1]= org_dat[i]
}
}
hist(org_dat, col = "Green", xlab = "Expression Value")
hist(c1, col = "Blue", add = T)
hist(as.numeric(filles), col = "Red", add=T)
org_dat = dat[,1]
c1 = org_dat
#plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/2 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
org_dat[i] = rnorm(1, nm, s)
filles[length(filles)+1]= org_dat[i]
}
}
hist(org_dat, col = "Green", xlab = "Expression Value")
hist(c1, col = "Blue", add = T)
hist(as.numeric(filles), col = "Red", add=T)
org_dat = dat[,1]
c1 = org_dat
#plot of inital dist of col 1
s = sd(org_dat, na.rm = T)    # compute standart deviation
s = 1/4 *s                    # take fraction
q = quantile(org_dat, na.rm = T)  # compute quantiles
nm = as.numeric(q[2])             # set new mean to 25% quantile
filles = list()
for(i in 1:length(org_dat)){
if(is.na(org_dat[i])){
org_dat[i] = rnorm(1, nm, s)
filles[length(filles)+1]= org_dat[i]
}
}
hist(org_dat, col = "Green", xlab = "Expression Value")
hist(c1, col = "Blue", add = T)
hist(as.numeric(filles), col = "Red", add=T)
